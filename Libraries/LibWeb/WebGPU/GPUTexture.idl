#import <WebGPU/GPU.idl>
#import <WebGPU/GPUObjectBase.idl>
#import <WebGPU/GPUTextureView.idl>

// https://www.w3.org/TR/webgpu/#enumdef-gputexturedimension
enum GPUTextureDimension {
    "1d",
    "2d",
    "3d",
};

// https://www.w3.org/TR/webgpu/#typedefdef-gputextureusageflags
typedef [EnforceRange] unsigned long GPUTextureUsageFlags;

// FIXME: Attempting to declare GPUTextureUsage a IDL parser failure on the line after {: "GPUTexture.idl:142: error: expected '('", so will just use hardcoded values for now

// https://www.w3.org/TR/webgpu/#gputexturedescriptor
dictionary GPUTextureDescriptor
         : GPUObjectDescriptorBase {
    required GPUExtent3D size;
    GPUIntegerCoordinate mipLevelCount = 1;
    GPUSize32 sampleCount = 1;
    GPUTextureDimension dimension = "2d";
    required GPUTextureFormat format;
    required GPUTextureUsageFlags usage;
    sequence<GPUTextureFormat> viewFormats = [];
};

// https://www.w3.org/TR/webgpu/#gputexture
[Exposed=(Window, Worker), SecureContext]
interface GPUTexture {
    GPUTextureView createView(optional GPUTextureViewDescriptor descriptor = {});

    [FIXME] undefined destroy();

    readonly attribute GPUIntegerCoordinateOut width;
    readonly attribute GPUIntegerCoordinateOut height;
    readonly attribute GPUIntegerCoordinateOut depthOrArrayLayers;
    readonly attribute GPUIntegerCoordinateOut mipLevelCount;
    readonly attribute GPUSize32Out sampleCount;
    readonly attribute GPUTextureDimension dimension;
    readonly attribute GPUTextureFormat format;
    readonly attribute GPUFlagsConstant usage;
};
GPUTexture includes GPUObjectBase;
